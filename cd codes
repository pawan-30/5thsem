wap to read the string accepted by regular expression:

#include <iostream>

bool isValidString(const std::string& str) {
    bool foundFirstA = false;
    bool foundB = false;
    for (char ch : str) {
        if (ch == 'a') {
            if (foundB) {
                break;
            }
            foundFirstA = true;
        } else if (ch == 'b') {
            if (!foundFirstA) {
                break;
            }
            foundB = true;
        } else {
            break;
        }
    }
    return foundFirstA && foundB;
}

int main() {
    std::string input;
    std::cout << "Enter a string: ";
    std::cin >> input;
    if (isValidString(input)) {
        std::cout << "String accepted by the pattern.\n";
    } else {
        std::cout << "String not accepted by the pattern.\n";
    }
    return 0;
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------
write a program to read a valid number from compiler:

#include <iostream>
#include <cstring>

int main() {
    int i = 0;
    int flag = 0;
    char inp[100];

    std::cout << "Enter no. : ";
    std::cin >> inp;

    while (inp[i] != '\0') {
        if (inp[i] >= '0' && inp[i] <= '9') {
            flag = i;
        } else {
            flag = 0;
            break;
        }
        i++;
    }

    if (flag) {
        std::cout << "Number is accepted\n";
    } else {
        std::cout << "Number is not accepted\n";
    }

    return 0;
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------
  write a program to read an identifier from compiler and return if it is valid or not:
#include <iostream>
#include <cstring>
#include <cctype>

const char keywords[32][10] = {"auto", "break", "case", "char", "const", "continue", "default", "do", "double", "else", "enum", "extern",
  "float", "for", "goto", "if", "int", "long", "register", "return", "short", "signed", "sizeof", "static", "struct", "switch", "typedef", "union", "unsigned", "void", "volatile", "while"};

bool isKeyword(const char* word) {
    for (int i = 0; i < 32; i++) {
        if (std::strcmp(word, keywords[i]) == 0) {
            return true;
        }
    }
    return false;
}

bool isValidIdentifier(const char* identifier) {
    if (!std::isalpha(identifier[0]) && identifier[0] != '_') {
        return false;
    }

    // Check the remaining characters
    for (int i = 1; i < std::strlen(identifier); i++) {
        if (!std::isalnum(identifier[i]) && identifier[i] != '_') {
            return false;
        }
    }
    if (isKeyword(identifier)) {
        return false;
    }
    return true;
}

int main() {
    char identifier[31];
    std::cout << "Enter an identifier: ";
    std::cin >> identifier;

    if (isValidIdentifier(identifier)) {
        std::cout << "Not a valid identifier." << std::endl;
    } else {
        std::cout << "Valid identifier." << std::endl;
    }

    return 0;
}

--------------------------------------------------------------------------------------------------------------------------------------------------------------
WAP to check whether a given string is a keyword or not:

#include <iostream>
#include <cstring>

int main() {
    const char keywords[32][10] = {"auto", "break", "case", "char", "const", "continue", "default", "do", "double", "else", "enum", "extern",
  "float", "for", "goto", "if", "int", "long", "register", "return", "short", "signed", "sizeof", "static", "struct", "switch", "typedef", "union", "unsigned", "void", "volatile", "while"};
    char str[31];
    std::cout << "Enter a string: ";
    std::cin >> str;

    int flag = 0;
    for(int i = 0; i < 32; i++) {
        if(std::strcmp(str, keywords[i]) == 0) {
            flag = 1;
            break;
        }
    }

    if(flag) {
        std::cout << "String is a keyword." << std::endl;
    } else {
        std::cout << "String is not a keyword." << std::endl;
    }

    return 0;
}
----------------------------------------------------------------------------------------------------------------------------------------------------
write a program to check whether a string belong to the grammar or not:

#include <stdio.h>
#include <string.h>

struct ProductionRule
{
    char left[10];
    char right[10];
};

int main()
{
    char input[20], stack[50], temp[50], ch[2], *token1, *token2, *substring;
    int i, j, stack_length, substring_length, stack_top, rule_count = 0;
    struct ProductionRule rules[10];

    stack[0] = '\0';

    printf("\nEnter the number of production rules: ");
    scanf("%d", &rule_count);

    printf("\nEnter the production rules (in the form 'left->right'): \n");
    for (i = 0; i < rule_count; i++)
    {
        scanf("%s", temp);
        token1 = strtok(temp, "->");
        token2 = strtok(NULL, "->");
        strcpy(rules[i].left, token1);
        strcpy(rules[i].right, token2);
    }

    printf("\nEnter the input string: ");
    scanf("%s", input);

    i = 0;
    while (1)
    {
        if (i < strlen(input))
        {
            ch[0] = input[i];
            ch[1] = '\0';
            i++;
            strcat(stack, ch);
            printf("%s\t", stack);
            for (int k = i; k < strlen(input); k++)
            {
                printf("%c", input[k]);
            }
            printf("\tShift %s\n", ch);
        }
       
        for (j = 0; j < rule_count; j++)
        {
            substring = strstr(stack, rules[j].right);
            if (substring != NULL)
            {
                stack_length = strlen(stack);
                substring_length = strlen(substring);
                stack_top = stack_length - substring_length;
                stack[stack_top] = '\0';
                strcat(stack, rules[j].left);
                printf("%s\t", stack);
                for (int k = i; k < strlen(input); k++)
                {
                    printf("%c", input[k]);
                }
                printf("\tReduce %s->%s\n", rules[j].left, rules[j].right);
                j = -1;
            }
        }
        if (strcmp(stack, rules[0].left) == 0 && i == strlen(input))
        {
            printf("\nAccepted");
            break;
        }
        if (i == strlen(input))
        {
            printf("\nNot Accepted");
            break;
        }
    }

    return 0;
}
---------------------------------------------------------------------------------------------------------------------------------------------------------
  wap to remove left recursion:
#include <iostream>
#include <string>
using namespace std;
int main()
{
    string ip, op1, op2, temp;
    int sizes[10] = {};
    char c;
    int n, j, l;
    cout << "Enter the Parent Non-Terminal : ";
    cin >> c;
    ip.push_back(c);
    op1 += ip + "\'->";
    ip += "->";
    op2 += ip;
    cout << "Enter the number of productions : ";
    cin >> n;
    for (int i = 0; i < n; i++)
    {
        cout << "Enter Production " << i + 1 << ": ";
        cin >> temp;
        sizes[i] = temp.size();
        ip += temp;
        if (i != n - 1) ip += "|";
    }
    cout << "Production Rule: " << ip << endl;
    for (int i = 0, k = 3; i < n; i++)
    {
        if (ip[0] == ip[k])
        {
            cout << "Production " << i + 1 << " has left recursion." << endl;
            if (ip[k] != '#')
            {
                for (l = k + 1; l < k + sizes[i]; l++) op1.push_back(ip[l]);
                k = l + 1;
                op1.push_back(ip[0]);
                op1 += "\'|";
            }
        }
        else
        {
            cout << "Production " << i + 1 << " does not have left recursion." << endl;
            if (ip[k] != '#'){
                for (j = k; j < k + sizes[i]; j++)
                    op2.push_back(ip[j]);
                k = j + 1;
                op2.push_back(ip[0]);
                op2 += "\'|";
            }
            else{
                op2.push_back(ip[0]);
                op2 += "\'";
            }
        }
    }
    op1 += "#";
    cout << op2 << endl << op1 <<endl;
    return 0;
}
----------------------------------------------------------------------------------------------------------------------------
  write a program to eliminate left factoring from a grammar:

#include <stdio.h>
#include <string.h>
int main()
{
    char gram[20], part1[20], part2[20], modifiedGram[20], newGram[20], tempGram[20];
    int i, j = 0, k = 0, l = 0, pos;
    printf("Enter Production : A->");
    gets(gram);
    for (i = 0; gram[i] != '|'; i++, j++)
        part1[j] = gram[i];
    part1[j] = '\0';
    for (j = ++i, i = 0; gram[j] != '\0'; j++, i++)
        part2[i] = gram[j];
    part2[i] = '\0';
    for (i = 0; i < strlen(part1) || i < strlen(part2); i++)
    {
        if (part1[i] == part2[i])
        {
            modifiedGram[k] = part1[i];
            k++;
            pos = i + 1;
        }
    }
    for (i = pos, j = 0; part1[i] != '\0'; i++, j++)
    {
        newGram[j] = part1[i];
    }
    newGram[j++] = '|';
    for (i = pos; part2[i] != '\0'; i++, j++)
    {
        newGram[j] = part2[i];
    }
    modifiedGram[k] = 'X';
    modifiedGram[++k] = '\0';
    newGram[j] = '\0';
    printf("\n A->%s", modifiedGram);
    printf("\n X->%s\n", newGram);
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------
write a program to perform all operations of stack:

#include <iostream>
using namespace std;

int push(char stack[], int top)
{
    if(top==9)
    {
        cout<<"Stack Overflow"<<endl;
    }
    else
    {
        char item;
        cout<<"Enter data to enter - ";
        cin>>item;
        top+=1;
        stack[top]=item;
        cout<<"Element pushed!"<<endl;
    }
    return top;
}

int pop(char stack[], int top)
{
    if(top==-1)
    {
        cout<<"Stack Underflow"<<endl;
    }
    else
    {
        top-=1;
        cout<<"Element popped!"<<endl;
    }
    return top;
}

void display(char stack[], int top)
{
    if(top==-1)
    {
        cout<<"Stack Underflow"<<endl;
    }
    else
    {
        for(int i=top;i>=0;i--)
        {
            cout<<stack[i];
        }
        cout<<"\n";
    }
}

int main()
{
    char stack[10];
    int option=0, top=-1;
    while(option!=4)
    {
        cout<<"Enter 1 for Push, 2 for Pop, 3 for Display & 4 for Exit - ";
        cin>>option;
        switch(option)
        {
            case 1:
                top=push(stack, top);
                break;
            case 2:
                top=pop(stack, top);
                break;
            case 3:
                display(stack, top);
                break;
            case 4:
                cout<<"Exiting!!!";
                break;
            default:
                cout<<"Enter 1/2/3/4"<<endl;
        }
    }
    return 0;
}
------------------------------------------------------------------------------------------------------------------------------
  write a program to check the grammar is operator grammar:

#include <iostream>
#include <vector>
#include <unordered_set>
#include <unordered_map>

using namespace std;

class Grammar {
private:
    unordered_set<char> nonTerminals;
    unordered_set<char> terminals;
    unordered_map<char, vector<string>> productions;

public:
    void addProduction(char nonTerminal, const vector<string>& production) {
        nonTerminals.insert(nonTerminal);
        for (const string& str : production) {
            for (char ch : str) {
                if (!isupper(ch)) {
                    terminals.insert(ch);
                }
            }
        }
        productions[nonTerminal] = production;
    }

    bool isOperatorGrammar() {
        for (auto& entry : productions) {
            char nonTerminal = entry.first;
            const vector<string>& production = entry.second;

            for (const string& str : production) {
                if (str.length() < 2) {
                    // Production rule should have at least one operator
                    return false;
                }

                for (char ch : str) {
                    if (!isupper(ch) && terminals.find(ch) == terminals.end()) {
                        // Operator should be a terminal symbol
                        return false;
                    }
                }
            }
        }

        return true;
    }
};

int main() {
    Grammar grammar;

    cout << "Enter grammar productions. Enter 'q' to finish.\n";
    char nonTerminal;
    string productionStr;

    while (true) {
        cout << "Enter non-terminal: ";
        cin >> nonTerminal;

        if (nonTerminal == 'q') {
            break;
        }

        cout << "Enter production rules (separated by spaces): ";
        getline(cin >> ws, productionStr);

        vector<string> production;
        size_t pos = 0;
        while ((pos = productionStr.find(' ')) != string::npos) {
            production.push_back(productionStr.substr(0, pos));
            productionStr.erase(0, pos + 1);
        }
        production.push_back(productionStr);

        grammar.addProduction(nonTerminal, production);
    }

    if (grammar.isOperatorGrammar()) {
        cout << "The given grammar is an operator grammar." << endl;
    } else {
        cout << "The given grammar is not an operator grammar." << endl;
    }

    return 0;
}
--------------------------------------------------------------------------------------------------------------------------
leading trailing:

#include<bits/stdc++.h>
using namespace std;

int nt, t, top = 0;
char s[50], NT[10], T[10], st[50], l[10][10], tr[50][50];
int searchnt(char a) {
  int count = -1, i;
  for (i = 0; i < nt; i++) {
    if (NT[i] == a)
      return i;
  }
  return count;
}
int searchter(char a) {
  int count = -1, i;
  for (i = 0; i < t; i++) {
    if (T[i] == a)
      return i;
  }
  return count;
}
void push(char a) {
  s[top] = a;
  top++;
}
char pop() {
  top--;
  return s[top];
}
void installl(int a, int b)

{
  if (l[a][b] == 'f') {
    l[a][b] = 't';
    push(T[b]);
    push(NT[a]);
  }
}
void installt(int a, int b) {
  if (tr[a][b] == 'f') {
    tr[a][b] = 't';
    push(T[b]);
    push(NT[a]);
  }
}

int main() {
  int i, s, k, j, n;
  char pr[30][30], b, c;
  cout << "Enter the no of productions:";
  cin >> n;
  cout << "Enter the productions one by one\n";
  for (i = 0; i < n; i++)
    cin >> pr[i];
  nt = 0;
  t = 0;
  for (i = 0; i < n; i++) {
    if ((searchnt(pr[i][0])) == -1)
      NT[nt++] = pr[i][0];
  }
  for (i = 0; i < n; i++) {
    for (j = 3; j < strlen(pr[i]); j++) {
      if (searchnt(pr[i][j]) == -1) {
        if (searchter(pr[i][j]) == -1)
          T[t++] = pr[i][j];
      }
    }
  }
  for (i = 0; i < nt; i++) {
    for (j = 0; j < t; j++)
      l[i][j] = 'f';
  }
  for (i = 0; i < nt; i++) {
    for (j = 0; j < t; j++)

      tr[i][j] = 'f';
  }
  for (i = 0; i < nt; i++) {
    for (j = 0; j < n; j++) {
      if (NT[(searchnt(pr[j][0]))] == NT[i]) {
        if (searchter(pr[j][3]) != -1)
          installl(searchnt(pr[j][0]), searchter(pr[j][3]));
        else {
          for (k = 3; k < strlen(pr[j]); k++) {
            if (searchnt(pr[j][k]) == -1) {
              installl(searchnt(pr[j][0]), searchter(pr[j][k]));
              break;
            }
          }
        }
      }
    }
  }
  while (top != 0) {
    b = pop();
    c = pop();
    for (s = 0; s < n; s++) {
      if (pr[s][3] == b)
        installl(searchnt(pr[s][0]), searchter(c));
    }
  }
  for (i = 0; i < nt; i++) {
    cout << "Leading[" << NT[i] << "]" << "\t{";
    for (j = 0; j < t; j++) {
      if (l[i][j] == 't')
        cout << T[j] << ",";
    }
    cout << "}\n";
  }

  top = 0;
  for (i = 0; i < nt; i++) {
    for (j = 0; j < n; j++) {
      if (NT[searchnt(pr[j][0])] == NT[i]) {
        if (searchter(pr[j][strlen(pr[j]) - 1]) != -1)
          installt(searchnt(pr[j][0]), searchter(pr[j][strlen(pr[j]) - 1]));
        else {
          for (k = (strlen(pr[j]) - 1); k >= 3; k--) {
            if (searchnt(pr[j][k]) == -1) {
              installt(searchnt(pr[j][0]), searchter(pr[j][k]));
              break;
            }
          }
        }
      }
    }
  }
  while (top != 0) {
    b = pop();
    c = pop();
    for (s = 0; s < n; s++) {
      if (pr[s][3] == b)
        installt(searchnt(pr[s][0]), searchter(c));
    }
  }
  for (i = 0; i < nt; i++) {
    cout << "Trailing[" << NT[i] << "]" << "\t{";
    for (j = 0; j < t; j++) {
      if (tr[i][j] == 't')
        cout << T[j] << ",";
    }
    cout << "}\n";
  }
  return 0;
}
